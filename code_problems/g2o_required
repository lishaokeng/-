一、g2o的CMakeLists
1.add_compile_options(-std=c++11)                                       添加c++11标准

2.set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake_module/")          添加FindG2O_cmake的路径

3.find_package(G2O REQUIRED)
  include_directories(${G2O_INCLUDE_DIRS})
  
  target_link_libraries(main g2o_core g2o_stuff)                        g2o的链接库比较特殊，无法用${G2O_LIBRARIES}引用
  

二、g2o的include头文件

按笔记图的步骤，线性求解器         ->   块求解器         ->      迭代策略                                ->      总的稀疏优化器         ->     （自定义）点、线
              （求解HX=b）            （JTJ稀疏策略）           (高斯牛顿\LM)                                   sparse_optimizer
              solvers/csparse         core/bolck_solver.h      core/optimization_algorithm_levenberg.h        core/sparse_optimizer.h      core/base_vertex.h    或types里已定义点线
              solvers/dense                                    core/optimization_algorithm_gauss_newton.h                                  core/base_unaryedge.h
              solvers/pcg                                      core/optimization_algorithm_dogleg.h                                        core/base_binaryedge.h
              solvers/cholmod                                                                                                              core/base_multiedge.h

三、g2o自带的成员变量和成员函数
1. vertex的_estimate可以自定义，edge的_error和_measurement只能是Eigen::Matrix类型
class myclass {
public:
void add(const double* b){
  rotation=SO3d::exp(Vector3d(b));
  pretranslation=Vector3d(b+3);
  f=*(b+6);
  k1=*(b+7);
  k2=*(b+8);
}
Matrix3d roration;
Vector3d pretranslation;
double f,k1,k2;
};
class myvertex:public BaseVertex<9,myclass>        9为顶点维度，myclass为顶点类型，可以自定义，当自定义时成员变量_estimate类型也是myclass
{
public:
    virtual void setToOriginImpl()override
    {
      _estimate=myclass();
    }
    virtual void oplusImpl(const double* d)
    {
      myclass v(d);
      _estimate.rotation+=v->rotation;
      _estimate.pretranslation+=v->pretranslation;
      _estimate.f+=v->f;
      _estimate.k1+=v->k1;
      _estimate.k2+=v->k2;
    }
    virtual bool read(istream& is){}            纯虚函数必须重写，这里重写内容为空
    virtual bool write(ostream& os){}
};
2.class myedge::public BaseUnaryEdge<3,Vector6d,myvertex>      3为_error维度Vector3d, Vector6d为_measurement类型，computeError中使用,注意当1时_error(0,0)来表示残差，因为Matrix<double,1,1>
{
public:
  virtual void computeError()
  {
    auto *v=(myvertex*)_vertices[0];
    Vector3d p=Vector3d(v->estimate[3],v->estimate[4],v->estimate[5]);
    _error=Vector3d(_measurement[0],_measurement[1],_measurement[2])-(v->rotation*p+v->pretranslation);
  }
}；
